using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

namespace MalwareFilter.ScanEngine.Module
{
    class Adware
    {
        public string VirusName = "";
        public string FileLocation = "";
        public string EngineName = "Adware Scan Engine";
        public List<string> AdwareList = new List<string>();

        KavSignature cSignFile = new KavSignature();

        public void LoadVDB()
        {
            cSignFile.LoadVDB(AdwareList, KavConfig.sAdwareVdbPath);
            KavConfig.VirusNumber += AdwareList.Count;

            for (int i =0;i < AdwareList.Count; i++)
            {
                KavConfig.VirusNameList.Add(AdwareList[i]);
            }

            
        }

        public KavKernel.ScanResult ScanFile(string FilePath)
        {
            KavKernel.ScanResult mScanResult = KavKernel.ScanResult.NotInfected;

            if (File.Exists(FilePath))
            {
                if (IsPeHeader(FilePath))
                {
                    if (IsCheckSignedFile(FilePath))
                    {


                        X509Certificate Certificate = X509Certificate.CreateFromSignedFile(FilePath);
                        X509Certificate2 Certificate2 = new X509Certificate2(Certificate);

                        string StrNameInfo = Certificate2.GetNameInfo(X509NameType.SimpleName, false);

                        string sHash = KavHash.CalculateMd5Buffer(StrNameInfo).ToUpper();

                        foreach (string MainAdwareList in AdwareList)
                        {
                            if (MainAdwareList.Contains(sHash))
                            {
                                string[] strData = MainAdwareList.Split(new string[]
                                {
                                           sHash
                                }, StringSplitOptions.None);

                                for (int j = 0; j < strData.Length; j++)
                                {
                                    string strVirusName = strData[j].Trim();

                                    if (strVirusName.Equals(",") == false)
                                    {
                                        VirusName = strVirusName;
                                        FileLocation = FilePath;

                                        //cQuarantineFile.AddQuarantineFile(FilePath, strVirusName);
                                    }
                                }

                                mScanResult = KavKernel.ScanResult.Infected;
                            }
                        }

                    }
                }
            }
            else
            {
                mScanResult = KavKernel.ScanResult.NotFoundPath;
            }

            return mScanResult;
        }

        private bool IsCheckSignedFile(string fileName)
        {
            bool IsSigned = false;

            try
            {
                X509Certificate Certificate = X509Certificate.CreateFromSignedFile(fileName);
                X509Certificate2 Certificate2 = new X509Certificate2(Certificate);
                IsSigned = true;
            }
            catch (Exception)
            {
                IsSigned = false;
            }
            return IsSigned;
        }

        public bool IsPeHeader(string fileName)
        {
            byte[] buffer = null;
            FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read);
            BinaryReader br = new BinaryReader(fs);
            long numBytes = new FileInfo(fileName).Length;
            //buffer = br.ReadBytes((int)numBytes);
            buffer = br.ReadBytes(5);
            var enc = new ASCIIEncoding();
            var header = enc.GetString(buffer);
            //%PDF−1.0
            // If you are loading it into a long, this is (0x04034b50).
            if (buffer[0] == 0x4D && buffer[1] == 0x5A)
            {
                return header.StartsWith("MZ");
            }
            return false;
        }
    }
}
