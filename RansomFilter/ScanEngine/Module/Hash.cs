using Features;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MalwareFilter.ScanEngine.Module
{
    class Hash
    {
        public string VirusName = "";
        public string FileLocation = "";
        public string EngineName = "Hash Scan Engine";

        public List<string> HashList = new List<string>();
        public List<string> Md5List = new List<string>();

        KavSignature cSignFile = new KavSignature();

        public void LoadVDB()
        {
            cSignFile.LoadVDB(HashList, KavConfig.sDailyVdbPath);
            cSignFile.LoadVDB(Md5List, KavConfig.sMainVirusDB);

            KavConfig.VirusNumber += HashList.Count;
            KavConfig.VirusNumber += Md5List.Count;
        }

        public KavKernel.ScanResult ScanFile(string FilePath)
        {
            KavKernel.ScanResult mScanResult = KavKernel.ScanResult.NotInfected;

            if (File.Exists(FilePath))
            {
                string sHash = KavHash.CalculateMD5(FilePath);

                int Size = (int)new FileInfo(FilePath).Length;

                foreach (string MainHashList in HashList)
                {
                    if (MainHashList.Contains(sHash))
                    {
                        string[] strData = MainHashList.Split(new string[]
                        {
                             sHash + "," +Size + ","
                        }, StringSplitOptions.None);

                        for (int j = 0; j < strData.Length; j++)
                        {
                            string strVirusName = strData[j].Trim();

                            if (strVirusName.Contains(","))
                            {
                                string[] sVirusName = strVirusName.Split(',');

                                VirusName = sVirusName[2];
                                FileLocation = FilePath;
                            }
                            else
                            {
                                VirusName = strVirusName;
                                FileLocation = FilePath;
                            }
                        }

                        mScanResult = KavKernel.ScanResult.Infected;
                    }
                }


            }
            else
            {
                mScanResult = KavKernel.ScanResult.NotFoundPath;
            }

            string sHash2 = KavHash.CalculateMD5(FilePath);
            int Size2 = (int)new FileInfo(FilePath).Length;

            if (Md5List.Contains(sHash2.ToUpper()))
            {
                if (PeFile.Is32BitPeFile(FilePath))
                {
                    VirusName = $"Malware.Win32.Generic (A)";
                    FileLocation = FilePath;
                    mScanResult = KavKernel.ScanResult.Infected;
                }
                else if (PeFile.Is64BitPeFile(FilePath))
                {
                    VirusName = $"Malware.Win64.Generic (A)";
                    FileLocation = FilePath;
                    mScanResult = KavKernel.ScanResult.Infected;
                }
                else
                {
                    VirusName = $"Malware.Generic (A)";
                    FileLocation = FilePath;
                    mScanResult = KavKernel.ScanResult.Infected;
                }
            }
            else if (Md5List.Contains(sHash2.ToLower()))
            {
                if (PeFile.Is32BitPeFile(FilePath))
                {
                    VirusName = $"Malware.Win32.Generic (B)";
                    FileLocation = FilePath;
                    mScanResult = KavKernel.ScanResult.Infected;
                }
                else if (PeFile.Is64BitPeFile(FilePath))
                {
                    VirusName = $"Malware.Win64.Generic (B)";
                    FileLocation = FilePath;
                    mScanResult = KavKernel.ScanResult.Infected;
                }
                else
                {
                    VirusName = $"Malware.Generic (B)";
                    FileLocation = FilePath;
                    mScanResult = KavKernel.ScanResult.Infected;
                }
            }

            return mScanResult;
        }
    }
}
